<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.health.dao.UserDao">

    <!--自定义映射规则-->
    <resultMap id="findUserAndRoleAndPermission" type="user">
        <id column="id" property="id"/>
        <result column="birthday" property="birthday"/>
        <result column="gender" property="gender"/>
        <result column="username" property="username"/>
        <result column="password" property="password"/>
        <result column="remark" property="remark"/>
        <result column="station" property="station"/>
        <result column="telephone" property="telephone"/>
        <collection property="roles" ofType="role">
            <id column="rid" property="id"/>
            <result column="rName" property="name"/>
            <result column="rKeyword" property="keyword"/>
            <result column="rDescription" property="description"/>
            <collection property="permissions" ofType="Permission">
                <id column="pid" property="id"/>
                <result column="pName" property="name"/>
                <result column="pKeyword" property="keyword"/>
                <result column="pDescription" property="description"/>
            </collection>
        </collection>
    </resultMap>

    <select id="findUserByUsername" parameterType="string" resultMap="findUserAndRoleAndPermission">
      SELECT tu.*,tr.id rid,tr.name rName,tr.keyword rKeyword,tr.description rDescription,
          tp.id pid ,tp.name pName,tp.keyword pKeyword,tp.description pDescription
          FROM t_user tu,t_role tr,t_user_role tur,t_permission tp,t_role_permission trp
          WHERE tur.user_id=tu.id AND tur.role_id=tr.id
          AND trp.role_id=tr.id AND trp.permission_id=tp.id
          AND tu.username=#{username}
    </select>

    <!--分页查询所有用户信息-->
    <select id="findAllUser" parameterType="string" resultType="user">
        SELECT * FROM t_user
        <if test="value!=null and value.length>0 ">
            WHERE username LIKE #{value} OR gender = #{value} OR telephone LIKE #{value}
        </if>
    </select>

    <!--根据手机号码查询用户-->
    <select id="findUserByTelephone" resultType="user" parameterType="string">
    SELECT * FROM t_user WHERE telephone=#{telephone}
    </select>

    <!--添加用户并获取的自增长的id-->
    <insert id="AddUser" parameterType="user">
        INSERT INTO t_user( birthday, gender, username, password, remark, station, telephone)
        VALUES(#{birthday}, #{gender}, #{username}, #{password}, #{remark}, #{station}, #{telephone})
        <selectKey keyColumn="id" keyProperty="id" resultType="int" order="AFTER">
            SELECT LAST_insert_id()
        </selectKey>
    </insert>

    <!--添加用户与角色之间的关系-->
    <insert id="AddUserAndRole" parameterType="int">
      INSERT INTO  t_user_role (user_id,role_id)
      VALUES(#{userId},#{childrenId})
    </insert>

    <!-- 根据id查询用户-->
    <select id="findUserById" resultType="user" parameterType="int">
        SELECT * FROM t_user WHERE id=#{id}
    </select>

    <!--更新用户信息-->
    <update id="updateUser" parameterType="user">
        UPDATE t_user
        <set>
            birthday=#{birthday},
            gender=#{gender},
            username=#{username},
            password=#{password},
            remark=#{remark},
            station=#{station},
            telephone=#{telephone}
        </set>
        WHERE id=#{id}
    </update>

    <!--删除原有的关系-->
    <delete id="DeleteUserAndRole" parameterType="int">
        DELETE  FROM t_user_role WHERE user_id=#{id}
    </delete>

    <!-- 根据id查询用户与角色的关系集合-->
    <select id="findUserCountById" parameterType="int" resultType="int">
        SELECT COUNT(0) FROM t_user_role WHERE user_id=#{id}
    </select>

    <!--删除用户-->
    <delete id="deleteUserById" parameterType="int">
        DELETE FROM t_user WHERE id=#{id}
    </delete>

    <!--根据用户名查询用户信息-->
    <select id="findOneUserByUsername" parameterType="string" resultType="user">
        SELECT  *  FROM t_user WHERE username=#{username}
    </select>
    <!--根据用户名统计用户数量-->
    <select id="findUserCountByUsername" resultType="int" parameterType="string">
        SELECT COUNT(0) FROM t_user WHERE username=#{username}
    </select>
    <!--根据手机号码统计用户数量-->
    <select id="findUserCountByTelephone" resultType="int" parameterType="string">
        SELECT COUNT(0)  FROM t_user WHERE  telephone=#{telephone}
    </select>
    <!--自定义映射规则-->
    <resultMap id="findAllMenuByUsername" type="menu">
        <id column="BigId" property="id"/>
        <result column="BigName" property="name"/>
        <result column="BigPath" property="path"/>
        <result column="BigPriority" property="priority"/>
        <result column="BigIcon" property="icon"/>
        <collection property="children" ofType="menu">
            <id column="SmId" property="id"/>
            <result column="SmName" property="name"/>
            <result column="SmLinkUrl" property="linkUrl"/>
            <result column="SmPath" property="path"/>
            <result column="SmPriority" property="priority"/>
            <result column="SmParentMenuId" property="parentMenuId"/>
        </collection>
    </resultMap>
    <!--根据用户名查询对应的菜单集合-->
    <select id="findAllMenuByUsername" parameterType="string" resultMap="findAllMenuByUsername">
      SELECT
      tm.id BigId,
      tm.name BigName,
      tm.path BigPath,
      tm.priority BigPriority,
      tm.icon  BigIcon ,
      tm2.id SmId,
      tm2.name SmName,
      tm2.linkUrl SmLinkUrl,
      tm2.path SmPath,
      tm2.priority SmPriority,
      tm2.parentMenuId SmParentMenuId
        FROM t_user tu,t_role tr,t_user_role tur,t_menu tm,t_role_menu trm,t_menu tm2
        WHERE  tu.id=tur.`user_id` AND tr.`id`=tur.`role_id` AND trm.`role_id`=tr.`id`
               AND trm.`menu_id`=tm.`id` AND tm.id=tm2.`parentMenuId`
               AND tu.username=#{username} ORDER BY tm.`path`,tm2.`path`
    </select>


    <!--查询用户所有信息-->
    <select id="findAll" resultType="user">
        select * from t_user
    </select>

</mapper>